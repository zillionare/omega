logging:
  version: 1
  disable_existing_loggers: false
  formatters:
    default:
      format: '%(asctime)s %(levelname)-1.1s %(process)d %(name)s:%(funcName)s:%(lineno)s | %(message)s'
  handlers:
    console:
      class: logging.StreamHandler
      formatter: default
    redis:
      class: rlog.RedisHandler
      formatter: default
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      channel: omega.log
  loggers:
    apscheduler:
      level: INFO
    pyemit:
      level: INFO
  root:
    handlers:
      - redis
    level: INFO

tz: Asia/Shanghai

logreceiver:
  klass: omega.logging.receiver.redis.RedisLogReceiver
  dsn: redis://${REDIS_HOST}:${REDIS_PORT}
  channel: omega.log
  filename: /tmp/log/zillionare/omega.log
  backup_count: 7
  max_bytes: 10M

redis:
  dsn: redis://${REDIS_HOST}:${REDIS_PORT}
pickle:
  ver: 4

omega:
  http_port: 3180

quotes_fetchers:
  - impl: jqadaptor    # there must be a create_instance method in this module
    account: ${JQ_ACCOUNT}
    password: ${JQ_PASSWORD}

dfs:
  engine: minio
  minio:
    host: ${MINIO_HOST}
    port: ${MINIO_PORT}
    access: ${MINIO_ACCESS}
    secret: ${MINIO_SECRET}
    secure: false
    bucket: zillionare

zarr:
  store_path: /zillionare/boards.zarr

influxdb:
  url: ${INFLUXDB_URL}
  token: ${INFLUXDB_TOKEN}
  org: ${INFLUXDB_ORG}
  bucket_name: ${INFLUXDB_BUCKET}
  enable_compress: true
  max_query_size: 15000

notify:
    mail_from: ${MAIL_FROM}
    mail_to:
        - ${MAIL_TO}
    mail_server: ${MAIL_SERVER}
    dingtalk_access_token: ${DINGTALK_ACCESS_TOKEN}
    dingtalk_secret: ${DINGTALK_SECRET}
